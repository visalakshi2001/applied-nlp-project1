import streamlit as st
import pandas as pd
from auth import retrieve_similar_articles, EXAMPLE_KW
from modelsrc import load_paper, generate_summary, perform_ner

st.set_page_config("Semantic Automated Literature Review", "ðŸ’¡")


def main():

    st.header("Literature Review", divider="violet")
    st.write("*Literatures available for: :blue[Alzheimer Disease], :violet[its Biomarkers] and related content*")
    st.caption("*Search results on aspects outside of these topics might not be available, and can produce innacurate results*")
    st.write("---")

    cols = st.columns([0.8, 0.2])

    with cols[0]:
        keyword = st.text_input("Input keyword for research", help=EXAMPLE_KW)
    with cols[1]:
        k = st.number_input("Number of papers", value=5, max_value=15)

    if keyword:
        st.subheader(f"Top {k} relevant papers on your provided keyword", )
        papers = retrieve_similar_articles(keyword, k)
         
        for i,paper in enumerate(papers):
            p = load_paper(paper["pmcid"]).iloc[0]
            with st.container(border=True):
                st.metric(label="Relevance Score", value=f"{paper['score']:.4f}")
                st.write("**Title:** ", paper["title"])
                st.write("**PMC id:** ", paper["pmcid"])
                st.write("**PubMed id:** ", paper["pmid"])
                st.write("**Authors:** ", p["authors"])
                st.write("**Abstract:** ", p["abstract"])

                st.write("**Summary:** ")
                gensum = st.button("Generate Summary", key=f"sumbutton_{i}")
                if gensum:
                    summary = generate_summary(p["fulltext"])
                    st.write(summary)
                    st.caption("*:green[generated by summarization model]*")
                
                st.write("**Key genetics biomarkers identified:** ")
                genner = st.button("Extract Biomarkers", key=f"nerbutton_{i}")
                if genner:
                    entities = perform_ner(p["fulltext"])
                    e = ", ".join([entity for entity,label in entities])
                    st.write(e)
                    st.caption("*:green[generated by NER model]*")
                
                with st.expander("More Info"):
                    if p["results"] != "nan":
                        st.write("**Results:** ", p["results"])
                    if p["conclusion"] != "nan":
                        st.write("**Conclusion:** ", p["conclusion"])



if __name__ == "__main__":
    main()